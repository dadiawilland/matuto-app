{"ast":null,"code":"var _jsxFileName = \"/Users/willanddadia/Documents/matuto/matuto-app/src/components/Register/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm, Controller } from \"react-hook-form\";\nimport styles from './Register.style';\nimport ProcessButton from '../../components/Buttons/ProcessButton';\nimport TextInput from '../../components/TextInput/TextInput';\nimport { FORM_FIELDS } from '../../constants/formConstants';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Register = () => {\n  _s();\n\n  const history = useHistory();\n  const {\n    formState: {\n      errors\n    },\n    handleSubmit,\n    control,\n    getValues\n  } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onSubmit'\n  });\n  const [val, setVal] = useState('');\n\n  const onSubmit = (data, e) => {\n    history.push({\n      pathname: '/payment-info',\n      state: {\n        account: data\n      }\n    });\n  };\n\n  const onError = (data, e) => {\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles().containerForm,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      style: styles().formTitleFont,\n      children: \"Register to Matuto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles().containerInputFieldRow,\n      children: FORM_FIELDS.REGISTER_NAME.map((formfield, i) => {\n        return /*#__PURE__*/_jsxDEV(Controller, {\n          control: control,\n          name: formfield.name,\n          rules: formfield.validators,\n          render: ({\n            field: {\n              onChange,\n              value\n            }\n          }) => /*#__PURE__*/_jsxDEV(TextInput, {\n            onChange: onChange,\n            val: value,\n            style: { ...styles().containerInputField,\n              ...styles().containerInputFieldSml\n            },\n            type: formfield.type,\n            name: formfield.name,\n            label: formfield.label,\n            error: errors[formfield.name]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 33\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles().containerInputFields,\n      children: FORM_FIELDS.REGISTER.map((formfield, i) => {\n        if (formfield.name === 'passwordConfirm') {\n          formfield.validators = { ...formfield.validators,\n            validate: {\n              matchesPreviousPassword: value => {\n                const {\n                  password\n                } = getValues();\n                return password === value || 'Passwords should match!';\n              }\n            }\n          };\n        }\n\n        return /*#__PURE__*/_jsxDEV(Controller, {\n          control: control,\n          name: formfield.name,\n          rules: formfield.validators,\n          render: ({\n            field: {\n              onChange,\n              value\n            }\n          }) => /*#__PURE__*/_jsxDEV(TextInput, {\n            onChange: onChange,\n            val: value,\n            style: styles().containerInputField,\n            type: formfield.type,\n            name: formfield.name,\n            label: formfield.label,\n            error: errors[formfield.name]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 33\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProcessButton, {\n      onClick: handleSubmit(onSubmit, onError),\n      style: {\n        top: 300\n      },\n      isNav: false,\n      dest: 'payment-info',\n      btnLabel: \"Next\",\n      style: styles().containerButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Register, \"MauIFvv3bb+Q38NT7f+8iG2f+b4=\", false, function () {\n  return [useHistory, useForm];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/willanddadia/Documents/matuto/matuto-app/src/components/Register/Register.js"],"names":["React","useEffect","useState","useForm","Controller","styles","ProcessButton","TextInput","FORM_FIELDS","useHistory","Register","history","formState","errors","handleSubmit","control","getValues","mode","reValidateMode","val","setVal","onSubmit","data","e","push","pathname","state","account","onError","console","log","containerForm","formTitleFont","containerInputFieldRow","REGISTER_NAME","map","formfield","i","name","validators","field","onChange","value","containerInputField","containerInputFieldSml","type","label","containerInputFields","REGISTER","validate","matchesPreviousPassword","password","top","containerButton"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react'\nimport { useForm, Controller } from \"react-hook-form\";\nimport styles from './Register.style'\nimport ProcessButton from '../../components/Buttons/ProcessButton'\nimport TextInput from '../../components/TextInput/TextInput'\nimport { FORM_FIELDS } from '../../constants/formConstants';\nimport { useHistory } from 'react-router-dom';\n\nconst Register = () => {\n\n    const history = useHistory();\n\n    const {formState: { errors }, handleSubmit, control, getValues } = useForm({\n        mode: 'onSubmit', \n        reValidateMode: 'onSubmit'\n    });\n\n    const [val, setVal] = useState('');\n\n    \n    const onSubmit = (data, e) => {\n        history.push({\n            pathname: '/payment-info',\n            state: {account: data}\n        })\n    }\n\n    const onError = (data, e) => {\n        console.log(data);\n    }\n\n    return (\n        <div style={styles().containerForm}>\n            <span style={styles().formTitleFont}>Register to Matuto</span>\n            <div style={styles().containerInputFieldRow}>\n                {FORM_FIELDS.REGISTER_NAME.map((formfield, i) => {\n                    return (        \n                        <Controller\n                            key={i}\n                            control={control}\n                            name={formfield.name}\n                            rules={formfield.validators}\n                            render={({\n                                field: { onChange, value }\n                                }) => \n                                <TextInput onChange={onChange} val={value} style={{...styles().containerInputField, ...styles().containerInputFieldSml}} type={formfield.type} \n                                    name={formfield.name} label={formfield.label} error={errors[formfield.name]}/>\n                            }\n                        />\n                    );\n                })}\n            </div>\n            <div style={styles().containerInputFields}>\n                {FORM_FIELDS.REGISTER.map((formfield, i) => {\n                    if (formfield.name === 'passwordConfirm') {\n                        formfield.validators = {...formfield.validators, \n                            validate: {\n                            matchesPreviousPassword: (value) => {\n                              const { password } = getValues();\n                              return password === value || 'Passwords should match!';\n                            },\n                          },\n                        }\n                    }\n                    return (        \n                        <Controller\n                            key={i}\n                            control={control}\n                            name={formfield.name}\n                            rules={formfield.validators}\n                            render={({\n                                field: { onChange, value }\n                                }) => \n                                <TextInput onChange={onChange} val={value} style={styles().containerInputField} type={formfield.type} \n                                    name={formfield.name} label={formfield.label} error={errors[formfield.name]}/>\n                            }\n                        />\n                    );\n                })}\n            </div>\n            <ProcessButton onClick={handleSubmit(onSubmit, onError)} style={{top: 300}} isNav={false} dest={'payment-info'} btnLabel=\"Next\" style={styles().containerButton}/>\n        </div>\n    )\n}\n\nexport default Register "]},"metadata":{},"sourceType":"module"}