{"ast":null,"code":"import _regeneratorRuntime from\"/Users/willanddadia/Documents/matuto/matuto-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(accountLoginSaga),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(registerAccountSaga);import{call,put}from'redux-saga/effects';import{ACCOUNT}from'../redux-constants/accountConstants';import{registerAccountService,registerPaymentInfoService,accountLoginService}from'../services/account.service';export function accountLoginSaga(request){var response;return _regeneratorRuntime.wrap(function accountLoginSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(accountLoginService,request.data);case 3:response=_context.sent;if(!(response.status==200)){_context.next=9;break;}_context.next=7;return put({type:ACCOUNT.LOGIN_SUCCES,data:response.data});case 7:_context.next=11;break;case 9:_context.next=11;return put({type:ACCOUNT.LOGIN_ERROR,data:response});case 11:_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 16:case\"end\":return _context.stop();}}},_marked,null,[[0,13]]);};export function registerAccountSaga(request){var response,paymentResponse;return _regeneratorRuntime.wrap(function registerAccountSaga$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return call(registerAccountService,request.data.account);case 3:response=_context2.sent;if(!(response.status==200)){_context2.next=18;break;}request.data.paymentInfo.accountId=response.data.id;_context2.next=8;return call(registerPaymentInfoService,request.data.paymentInfo);case 8:paymentResponse=_context2.sent;if(!(paymentResponse.status===200)){_context2.next=14;break;}_context2.next=12;return put({type:ACCOUNT.REGISTER_SUCCESS,data:response.data});case 12:_context2.next=16;break;case 14:_context2.next=16;return put({type:ACCOUNT.REGISTER_ERROR,data:response});case 16:_context2.next=20;break;case 18:_context2.next=20;return put({type:ACCOUNT.REGISTER_ERROR,data:response});case 20:_context2.next=25;break;case 22:_context2.prev=22;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 25:case\"end\":return _context2.stop();}}},_marked2,null,[[0,22]]);}","map":{"version":3,"sources":["/Users/willanddadia/Documents/matuto/matuto-app/src/sagas/accountSagas.js"],"names":["accountLoginSaga","registerAccountSaga","call","put","ACCOUNT","registerAccountService","registerPaymentInfoService","accountLoginService","request","data","response","status","type","LOGIN_SUCCES","LOGIN_ERROR","console","log","account","paymentInfo","accountId","id","paymentResponse","REGISTER_SUCCESS","REGISTER_ERROR"],"mappings":"2KAKiBA,gB,iDAaAC,mB,EAlBjB,OAASC,IAAT,CAAeC,GAAf,KAA0B,oBAA1B,CACA,OAASC,OAAT,KAAwB,qCAAxB,CAEA,OAASC,sBAAT,CAAiCC,0BAAjC,CAA6DC,mBAA7D,KAAwF,6BAAxF,CAEA,MAAO,SAAUP,CAAAA,gBAAV,CAA2BQ,OAA3B,wKAEkB,MAAMN,CAAAA,IAAI,CAACK,mBAAD,CAAsBC,OAAO,CAACC,IAA9B,CAAV,CAFlB,OAEOC,QAFP,oBAGKA,QAAQ,CAACC,MAAT,EAAmB,GAHxB,0CAIK,MAAMR,CAAAA,GAAG,CAAC,CAACS,IAAI,CAAER,OAAO,CAACS,YAAf,CAA6BJ,IAAI,CAAEC,QAAQ,CAACD,IAA5C,CAAD,CAAT,CAJL,sDAMK,MAAMN,CAAAA,GAAG,CAAC,CAACS,IAAI,CAAER,OAAO,CAACU,WAAf,CAA4BL,IAAI,CAAEC,QAAlC,CAAD,CAAT,CANL,yFASCK,OAAO,CAACC,GAAR,cATD,qEAWN,CAED,MAAO,SAAUf,CAAAA,mBAAV,CAA8BO,OAA9B,gMAEkB,MAAMN,CAAAA,IAAI,CAACG,sBAAD,CAAyBG,OAAO,CAACC,IAAR,CAAaQ,OAAtC,CAAV,CAFlB,OAEOP,QAFP,qBAGKA,QAAQ,CAACC,MAAT,EAAmB,GAHxB,4BAIKH,OAAO,CAACC,IAAR,CAAaS,WAAb,CAAyBC,SAAzB,CAAqCT,QAAQ,CAACD,IAAT,CAAcW,EAAnD,CAJL,iBAK6B,MAAMlB,CAAAA,IAAI,CAACI,0BAAD,CAA6BE,OAAO,CAACC,IAAR,CAAaS,WAA1C,CAAV,CAL7B,OAKWG,eALX,qBAMSA,eAAe,CAACV,MAAhB,GAA2B,GANpC,8CAOS,MAAMR,CAAAA,GAAG,CAAC,CAACS,IAAI,CAAER,OAAO,CAACkB,gBAAf,CAAiCb,IAAI,CAAEC,QAAQ,CAACD,IAAhD,CAAD,CAAT,CAPT,0DASS,MAAMN,CAAAA,GAAG,CAAC,CAACS,IAAI,CAAER,OAAO,CAACmB,cAAf,CAA+Bd,IAAI,CAAEC,QAArC,CAAD,CAAT,CATT,0DAYK,MAAMP,CAAAA,GAAG,CAAC,CAACS,IAAI,CAAER,OAAO,CAACmB,cAAf,CAA+Bd,IAAI,CAAEC,QAArC,CAAD,CAAT,CAZL,6FAeCK,OAAO,CAACC,GAAR,eAfD","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { ACCOUNT } from '../redux-constants/accountConstants';\n\nimport { registerAccountService, registerPaymentInfoService, accountLoginService } from '../services/account.service';\n\nexport function* accountLoginSaga(request) {\n    try {\n        const response = yield call(accountLoginService, request.data);\n        if (response.status == 200) {\n            yield put({type: ACCOUNT.LOGIN_SUCCES, data: response.data});\n        } else {\n            yield put({type: ACCOUNT.LOGIN_ERROR, data: response});\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport function* registerAccountSaga(request) {\n    try {\n        const response = yield call(registerAccountService, request.data.account);\n        if (response.status == 200) {\n            request.data.paymentInfo.accountId = response.data.id;\n            const paymentResponse = yield call(registerPaymentInfoService, request.data.paymentInfo);\n            if (paymentResponse.status === 200) {\n                yield put({type: ACCOUNT.REGISTER_SUCCESS, data: response.data});\n            } else {\n                yield put({type: ACCOUNT.REGISTER_ERROR, data: response});\n            }\n        } else {\n            yield put({type: ACCOUNT.REGISTER_ERROR, data: response});\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}"]},"metadata":{},"sourceType":"module"}