{"ast":null,"code":"var _jsxFileName = \"/Users/willanddadia/Documents/matuto/matuto-app/src/components/Register/PaymentInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm, Controller } from \"react-hook-form\";\nimport styles from './PaymentInfo.style';\nimport ProcessButton from '../Buttons/ProcessButton';\nimport PaymentButton from '../Buttons/PaymentButton';\nimport NavButton from '../Buttons/NavButton';\nimport TextInput from '../TextInput/TextInput';\nimport { useLocation } from \"react-router-dom\";\nimport { FORM_FIELDS } from '../../constants/formConstants';\nimport { registerAccountAction, registerAccountOnlyAction } from '../../actions/accountActions';\nimport { StyleRoot } from 'radium';\nimport Register from './Register';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaymentInfo = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const history = useHistory();\n  const {\n    formState: {\n      errors\n    },\n    handleSubmit,\n    control,\n    getValues\n  } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onSubmit'\n  });\n  const account = useSelector(state => state.account.account);\n  const accountLoginError = useSelector(state => state.account.accountLoginError);\n\n  const onSubmit = (data, e) => {\n    data.paymentInfoType = 1;\n    dispatch(registerAccountAction({\n      account: location.state.account,\n      paymentInfo: data\n    }));\n  };\n\n  const onError = (data, e) => {\n    console.log(data);\n  };\n\n  const handleClick = () => {\n    dispatch(registerAccountOnlyAction({\n      account: location.state.account\n    }));\n  };\n\n  useEffect(() => {\n    if (account.id && !accountLoginError) {\n      history.push('/on-boarding');\n    }\n  }, [account, accountLoginError]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: { ...styles().containerForm,\n      ...props.style\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      style: styles().formTitleFont,\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: styles().paymentTitleFont,\n      children: \"Payment Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles().containerPaymentBtnRow,\n      children: [/*#__PURE__*/_jsxDEV(PaymentButton, {\n        src: 'icon-creditcard.png',\n        text: 'Creditcard',\n        style: styles().containerPaymentBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PaymentButton, {\n        src: 'icon-gcash.png',\n        text: 'GCash',\n        style: styles().containerPaymentBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles().containerInputFields,\n      children: FORM_FIELDS.PAYMENT_INFO.map((formfield, i) => {\n        if (formfield.subFields) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles().containerInputFieldRow,\n            children: formfield.subFields.map((subFormField, ii) => {\n              return /*#__PURE__*/_jsxDEV(Controller, {\n                control: control,\n                name: subFormField.name,\n                rules: subFormField.validators,\n                defaultValue: \"\",\n                render: ({\n                  field: {\n                    onChange,\n                    value\n                  }\n                }) => /*#__PURE__*/_jsxDEV(TextInput, {\n                  onChange: onChange,\n                  val: value,\n                  style: { ...styles().containerInputField,\n                    ...styles().containerInputFieldSml\n                  },\n                  type: subFormField.type,\n                  name: subFormField.name,\n                  label: subFormField.label,\n                  error: errors[subFormField.name]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 49\n                }, this)\n              }, ii, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 41\n              }, this);\n            })\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(Controller, {\n            control: control,\n            name: formfield.name,\n            rules: formfield.validators,\n            render: ({\n              field: {\n                onChange,\n                value\n              }\n            }) => /*#__PURE__*/_jsxDEV(TextInput, {\n              onChange: onChange,\n              val: value,\n              style: { ...styles().containerInputField\n              },\n              type: formfield.type,\n              name: formfield.name,\n              label: formfield.label,\n              error: errors[formfield.name]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 37\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), props.isRegistration ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles().containerPriceField,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: styles().priceFieldFont,\n        children: [\"Total Amount:\", '\\u00A0', \" \", props.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(ProcessButton, {\n      onClick: handleSubmit(onSubmit, onError),\n      style: {\n        paddingTop: 11\n      },\n      isNav: false,\n      btnLabel: \"Submit\",\n      style: styles().containerButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), props.isRegistration ?\n    /*#__PURE__*/\n    // <NavButton title={'Skip'} dest=\"home\" style={styles().containerButton} /> \n    _jsxDEV(StyleRoot, {\n      style: styles().containerSkipBtn,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: handleClick,\n        style: styles().skipBtnFont,\n        children: \"Skip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PaymentInfo, \"5bZ0oI87BzGR1wsbrONulhSE/8U=\", false, function () {\n  return [useDispatch, useLocation, useHistory, useForm, useSelector, useSelector];\n});\n\n_c = PaymentInfo;\nexport default PaymentInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentInfo\");","map":{"version":3,"sources":["/Users/willanddadia/Documents/matuto/matuto-app/src/components/Register/PaymentInfo.js"],"names":["React","useEffect","useSelector","useDispatch","useForm","Controller","styles","ProcessButton","PaymentButton","NavButton","TextInput","useLocation","FORM_FIELDS","registerAccountAction","registerAccountOnlyAction","StyleRoot","Register","useHistory","PaymentInfo","props","dispatch","location","history","formState","errors","handleSubmit","control","getValues","mode","reValidateMode","account","state","accountLoginError","onSubmit","data","e","paymentInfoType","paymentInfo","onError","console","log","handleClick","id","push","containerForm","style","formTitleFont","title","paymentTitleFont","containerPaymentBtnRow","containerPaymentBtn","containerInputFields","PAYMENT_INFO","map","formfield","i","subFields","containerInputFieldRow","subFormField","ii","name","validators","field","onChange","value","containerInputField","containerInputFieldSml","type","label","isRegistration","containerPriceField","priceFieldFont","amount","paddingTop","containerButton","containerSkipBtn","skipBtnFont"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,qBAAT,EAAgCC,yBAAhC,QAAiE,8BAAjE;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAGA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B;AACA,QAAMkB,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,OAAO,GAAGL,UAAU,EAA1B;AACA,QAAM;AAACM,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF,KAAZ;AAAwBC,IAAAA,YAAxB;AAAsCC,IAAAA,OAAtC;AAA+CC,IAAAA;AAA/C,MAA6DvB,OAAO,CAAC;AACvEwB,IAAAA,IAAI,EAAE,UADiE;AAEvEC,IAAAA,cAAc,EAAE;AAFuD,GAAD,CAA1E;AAKA,QAAMC,OAAO,GAAG5B,WAAW,CAAE6B,KAAD,IAAWA,KAAK,CAACD,OAAN,CAAcA,OAA1B,CAA3B;AACA,QAAME,iBAAiB,GAAG9B,WAAW,CAAE6B,KAAD,IAAWA,KAAK,CAACD,OAAN,CAAcE,iBAA1B,CAArC;;AAEA,QAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC1BD,IAAAA,IAAI,CAACE,eAAL,GAAuB,CAAvB;AACAhB,IAAAA,QAAQ,CAACP,qBAAqB,CAAC;AAC3BiB,MAAAA,OAAO,EAAET,QAAQ,CAACU,KAAT,CAAeD,OADG;AAE3BO,MAAAA,WAAW,EAAEH;AAFc,KAAD,CAAtB,CAAR;AAKH,GAPD;;AASA,QAAMI,OAAO,GAAG,CAACJ,IAAD,EAAOC,CAAP,KAAa;AACzBI,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACH,GAFD;;AAIA,QAAMO,WAAW,GAAG,MAAM;AACtBrB,IAAAA,QAAQ,CAACN,yBAAyB,CAAC;AAC/BgB,MAAAA,OAAO,EAAET,QAAQ,CAACU,KAAT,CAAeD;AADO,KAAD,CAA1B,CAAR;AAGH,GAJD;;AAMA7B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG6B,OAAO,CAACY,EAAR,IAAc,CAACV,iBAAlB,EAAqC;AACjCV,MAAAA,OAAO,CAACqB,IAAR,CAAa,cAAb;AACH;AACJ,GAJQ,EAIN,CAACb,OAAD,EAAUE,iBAAV,CAJM,CAAT;AAMA,sBACI;AAAK,IAAA,KAAK,EAAE,EAAC,GAAG1B,MAAM,GAAGsC,aAAb;AAA4B,SAAGzB,KAAK,CAAC0B;AAArC,KAAZ;AAAA,4BACI;AAAM,MAAA,KAAK,EAAEvC,MAAM,GAAGwC,aAAtB;AAAA,gBAAsC3B,KAAK,CAAC4B;AAA5C;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAM,MAAA,KAAK,EAAEzC,MAAM,GAAG0C,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,KAAK,EAAE1C,MAAM,GAAG2C,sBAArB;AAAA,8BACI,QAAC,aAAD;AAAe,QAAA,GAAG,EAAE,qBAApB;AAA2C,QAAA,IAAI,EAAE,YAAjD;AAA+D,QAAA,KAAK,EAAE3C,MAAM,GAAG4C;AAA/E;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,aAAD;AAAe,QAAA,GAAG,EAAE,gBAApB;AAAsC,QAAA,IAAI,EAAE,OAA5C;AAAqD,QAAA,KAAK,EAAE5C,MAAM,GAAG4C;AAArE;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAOI;AAAK,MAAA,KAAK,EAAE5C,MAAM,GAAG6C,oBAArB;AAAA,gBACKvC,WAAW,CAACwC,YAAZ,CAAyBC,GAAzB,CAA6B,CAACC,SAAD,EAAYC,CAAZ,KAAkB;AAC5C,YAAID,SAAS,CAACE,SAAd,EAAyB;AACrB,8BACI;AAAa,YAAA,KAAK,EAAElD,MAAM,GAAGmD,sBAA7B;AAAA,sBACKH,SAAS,CAACE,SAAV,CAAoBH,GAApB,CAAwB,CAACK,YAAD,EAAeC,EAAf,KAAsB;AAC3C,kCACI,QAAC,UAAD;AAEI,gBAAA,OAAO,EAAEjC,OAFb;AAGI,gBAAA,IAAI,EAAEgC,YAAY,CAACE,IAHvB;AAII,gBAAA,KAAK,EAAEF,YAAY,CAACG,UAJxB;AAKI,gBAAA,YAAY,EAAC,EALjB;AAMI,gBAAA,MAAM,EAAE,CAAC;AACLC,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,QAAF;AAAYC,oBAAAA;AAAZ;AADF,iBAAD,kBAGJ,QAAC,SAAD;AAAW,kBAAA,QAAQ,EAAED,QAArB;AAA+B,kBAAA,GAAG,EAAEC,KAApC;AAA2C,kBAAA,KAAK,EAAE,EAAC,GAAG1D,MAAM,GAAG2D,mBAAb;AAAkC,uBAAG3D,MAAM,GAAG4D;AAA9C,mBAAlD;AAAyH,kBAAA,IAAI,EAAER,YAAY,CAACS,IAA5I;AACI,kBAAA,IAAI,EAAET,YAAY,CAACE,IADvB;AAC6B,kBAAA,KAAK,EAAEF,YAAY,CAACU,KADjD;AACwD,kBAAA,KAAK,EAAE5C,MAAM,CAACkC,YAAY,CAACE,IAAd;AADrE;AAAA;AAAA;AAAA;AAAA;AATR,iBACSD,EADT;AAAA;AAAA;AAAA;AAAA,sBADJ;AAeH,aAhBA;AADL,aAAUJ,CAAV;AAAA;AAAA;AAAA;AAAA,kBADJ;AAqBH,SAtBD,MAsBO;AACH,8BACI,QAAC,UAAD;AAEI,YAAA,OAAO,EAAE7B,OAFb;AAGI,YAAA,IAAI,EAAE4B,SAAS,CAACM,IAHpB;AAII,YAAA,KAAK,EAAEN,SAAS,CAACO,UAJrB;AAKI,YAAA,MAAM,EAAE,CAAC;AACLC,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,QAAF;AAAYC,gBAAAA;AAAZ;AADF,aAAD,kBAGJ,QAAC,SAAD;AAAW,cAAA,QAAQ,EAAED,QAArB;AAA+B,cAAA,GAAG,EAAEC,KAApC;AAA2C,cAAA,KAAK,EAAE,EAAC,GAAG1D,MAAM,GAAG2D;AAAb,eAAlD;AAAqF,cAAA,IAAI,EAAEX,SAAS,CAACa,IAArG;AACI,cAAA,IAAI,EAAEb,SAAS,CAACM,IADpB;AAC0B,cAAA,KAAK,EAAEN,SAAS,CAACc,KAD3C;AACkD,cAAA,KAAK,EAAE5C,MAAM,CAAC8B,SAAS,CAACM,IAAX;AAD/D;AAAA;AAAA;AAAA;AAAA;AARR,aACSL,CADT;AAAA;AAAA;AAAA;AAAA,kBADJ;AAcH;AACJ,OAvCA;AADL;AAAA;AAAA;AAAA;AAAA,YAPJ,EAkDQpC,KAAK,CAACkD,cAAN,GACI,IADJ,gBAGK;AAAM,MAAA,KAAK,EAAE/D,MAAM,GAAGgE,mBAAtB;AAAA,6BACG;AAAM,QAAA,KAAK,EAAEhE,MAAM,GAAGiE,cAAtB;AAAA,oCAAoD,QAApD,OAA+DpD,KAAK,CAACqD,MAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,YArDb,eAyDI,QAAC,aAAD;AAAe,MAAA,OAAO,EAAE/C,YAAY,CAACQ,QAAD,EAAWK,OAAX,CAApC;AAAyD,MAAA,KAAK,EAAE;AAACmC,QAAAA,UAAU,EAAE;AAAb,OAAhE;AAAkF,MAAA,KAAK,EAAE,KAAzF;AAAgG,MAAA,QAAQ,EAAC,QAAzG;AAAkH,MAAA,KAAK,EAAEnE,MAAM,GAAGoE;AAAlI;AAAA;AAAA;AAAA;AAAA,YAzDJ,EA0DMvD,KAAK,CAACkD,cAAN;AAAA;AACE;AACA,YAAC,SAAD;AAAW,MAAA,KAAK,EAAE/D,MAAM,GAAGqE,gBAA3B;AAAA,6BACI;AAAM,QAAA,OAAO,EAAElC,WAAf;AAA4B,QAAA,KAAK,EAAEnC,MAAM,GAAGsE,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFF,GAKI,IA/DV;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmEH,CAxGD;;GAAM1D,W;UACef,W,EACAQ,W,EACDM,U,EACmDb,O,EAKnDF,W,EACUA,W;;;KAVxBgB,W;AA0GN,eAAeA,WAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm, Controller } from \"react-hook-form\";\nimport styles from './PaymentInfo.style'\nimport ProcessButton from '../Buttons/ProcessButton'\nimport PaymentButton from '../Buttons/PaymentButton'\nimport NavButton from '../Buttons/NavButton';\nimport TextInput from '../TextInput/TextInput'\nimport { useLocation } from \"react-router-dom\";\nimport { FORM_FIELDS } from '../../constants/formConstants';\nimport { registerAccountAction, registerAccountOnlyAction } from '../../actions/accountActions';\nimport { StyleRoot } from 'radium'\nimport Register from './Register';\nimport { useHistory } from 'react-router-dom';\n\n\nconst PaymentInfo = (props) => {\n    const dispatch = useDispatch();\n    const location = useLocation();\n    const history = useHistory();\n    const {formState: { errors }, handleSubmit, control, getValues } = useForm({\n        mode: 'onSubmit', \n        reValidateMode: 'onSubmit'\n    });\n\n    const account = useSelector((state) => state.account.account);\n    const accountLoginError = useSelector((state) => state.account.accountLoginError);\n\n    const onSubmit = (data, e) => {\n        data.paymentInfoType = 1;\n        dispatch(registerAccountAction({\n            account: location.state.account,\n            paymentInfo: data,\n        }));\n        \n    }\n\n    const onError = (data, e) => {\n        console.log(data);\n    }\n\n    const handleClick = () => {\n        dispatch(registerAccountOnlyAction({\n            account: location.state.account,\n        }));\n    }\n\n    useEffect(() => {\n        if(account.id && !accountLoginError) {\n            history.push('/on-boarding')\n        }\n    }, [account, accountLoginError]);\n\n    return (\n        <div style={{...styles().containerForm, ...props.style}}>\n            <span style={styles().formTitleFont}>{props.title}</span>\n            <span style={styles().paymentTitleFont}>Payment Information</span>\n            <div style={styles().containerPaymentBtnRow}>\n                <PaymentButton src={'icon-creditcard.png'} text={'Creditcard'} style={styles().containerPaymentBtn}/>\n                <PaymentButton src={'icon-gcash.png'} text={'GCash'} style={styles().containerPaymentBtn}/>\n            </div>\n            <div style={styles().containerInputFields}>\n                {FORM_FIELDS.PAYMENT_INFO.map((formfield, i) => {\n                    if (formfield.subFields) {\n                        return (\n                            <div key={i} style={styles().containerInputFieldRow}>\n                                {formfield.subFields.map((subFormField, ii) => {\n                                    return (\n                                        <Controller\n                                            key={ii}\n                                            control={control}\n                                            name={subFormField.name}\n                                            rules={subFormField.validators}\n                                            defaultValue=\"\"\n                                            render={({\n                                                field: { onChange, value  }\n                                                }) => \n                                                <TextInput onChange={onChange} val={value} style={{...styles().containerInputField, ...styles().containerInputFieldSml}} type={subFormField.type} \n                                                    name={subFormField.name} label={subFormField.label} error={errors[subFormField.name]}/>\n                                            }\n                                        />\n                                    );\n                                })}\n                            </div>\n                        );\n                    } else {\n                        return (        \n                            <Controller\n                                key={i}\n                                control={control}\n                                name={formfield.name}\n                                rules={formfield.validators}\n                                render={({\n                                    field: { onChange, value }\n                                    }) => \n                                    <TextInput onChange={onChange} val={value} style={{...styles().containerInputField}} type={formfield.type} \n                                        name={formfield.name} label={formfield.label} error={errors[formfield.name]}/>\n                                }\n                            />\n                        );\n                    }\n                })}\n            </div>\n            {\n                props.isRegistration ?\n                    null\n                :\n                    (<div  style={styles().containerPriceField}>\n                        <span style={styles().priceFieldFont}>Total Amount:{'\\u00A0'} {props.amount}</span>\n                    </div>)\n            }\n            <ProcessButton onClick={handleSubmit(onSubmit, onError)} style={{paddingTop: 11}} isNav={false} btnLabel=\"Submit\" style={styles().containerButton}/>\n            { props.isRegistration ? \n                // <NavButton title={'Skip'} dest=\"home\" style={styles().containerButton} /> \n                <StyleRoot style={styles().containerSkipBtn}>\n                    <span onClick={handleClick} style={styles().skipBtnFont}>Skip</span>\n                </StyleRoot>\n                : null}\n        </div>\n    )\n}\n\nexport default PaymentInfo "]},"metadata":{},"sourceType":"module"}