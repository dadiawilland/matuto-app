{"ast":null,"code":"var _jsxFileName = \"/Users/willanddadia/Documents/matuto/matuto-app/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm, Controller } from \"react-hook-form\";\nimport styles from './Login.style';\nimport { NavLink } from 'react-router-dom';\nimport ProcessButton from '../../components/Buttons/ProcessButton';\nimport AltLoginButton from '../../components/Buttons/AltLoginButton';\nimport TextInput from '../../components/TextInput/TextInput';\nimport { FORM_FIELDS } from '../../constants/formConstants';\nimport { loginAction } from '../../actions/accountActions';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    formState: {\n      errors\n    },\n    handleSubmit,\n    control\n  } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onSubmit'\n  });\n  const account = useSelector(state => state.account.account);\n  const accountLoginError = useSelector(state => state.account.accountLoginError);\n\n  const onSubmit = (data, e) => {\n    dispatch(loginAction(data));\n  };\n\n  const onError = (data, e) => {\n    console.log(data);\n  };\n\n  useEffect(() => {\n    console.log(account);\n    console.log(accountLoginError);\n  }, [account, accountLoginError]); // useEffect(() => {\n  // }, [accountLoginError]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles().containerForm,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      style: styles().formTitleFont,\n      children: \"Login to Matuto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), FORM_FIELDS.LOGIN.map((formfield, i) => {\n      return /*#__PURE__*/_jsxDEV(Controller, {\n        control: control,\n        name: formfield.name,\n        rules: formfield.validators,\n        render: ({\n          field: {\n            onChange,\n            value\n          }\n        }) => /*#__PURE__*/_jsxDEV(TextInput, {\n          onChange: onChange,\n          val: value,\n          style: styles().containerInputField,\n          type: formfield.type,\n          name: formfield.name,\n          label: formfield.label,\n          error: errors[formfield.name]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles().containerCheckbox,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        style: styles().checkboxField,\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: styles().checkboxFieldFont,\n        children: \"Keep me logged in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProcessButton, {\n      onClick: handleSubmit(onSubmit, onError),\n      isNav: false,\n      btnLabel: \"Login\",\n      style: styles().containerButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles().containerBreak,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles().breakLines\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: styles().breakFont,\n        children: \"Or\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles().breakLines\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AltLoginButton, {\n      dest: \"/\",\n      src: 'icon-google.png',\n      text: 'Sign in with Google',\n      style: styles().containerButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AltLoginButton, {\n      dest: \"/\",\n      src: 'icon-fb.png',\n      text: 'Sign in with Facebook',\n      style: styles().containerButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles().signUpFont,\n      children: [\"Not a member yet? \", /*#__PURE__*/_jsxDEV(NavLink, {\n        style: styles().signUpLinkFont,\n        to: \"/register\",\n        children: \"Sign up here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 62\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"g+dfk2JVACQox0nsDmSNyVCnVhE=\", false, function () {\n  return [useDispatch, useHistory, useForm, useSelector, useSelector];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/willanddadia/Documents/matuto/matuto-app/src/components/Login/Login.js"],"names":["React","useEffect","useState","useSelector","useDispatch","useForm","Controller","styles","NavLink","ProcessButton","AltLoginButton","TextInput","FORM_FIELDS","loginAction","useHistory","Login","dispatch","history","formState","errors","handleSubmit","control","mode","reValidateMode","account","state","accountLoginError","onSubmit","data","e","onError","console","log","containerForm","formTitleFont","LOGIN","map","formfield","i","name","validators","field","onChange","value","containerInputField","type","label","containerCheckbox","checkboxField","checkboxFieldFont","containerButton","containerBreak","breakLines","breakFont","signUpFont","signUpLinkFont"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm, Controller  } from \"react-hook-form\";\nimport styles from './Login.style'\nimport {NavLink} from 'react-router-dom'\nimport ProcessButton from '../../components/Buttons/ProcessButton'\nimport AltLoginButton from '../../components/Buttons/AltLoginButton'\nimport TextInput from '../../components/TextInput/TextInput';\nimport { FORM_FIELDS } from '../../constants/formConstants';\nimport { loginAction } from '../../actions/accountActions';\nimport { useHistory } from 'react-router-dom';\n\nconst Login = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const {formState: { errors }, handleSubmit, control } = useForm({\n        mode: 'onSubmit', \n        reValidateMode: 'onSubmit'\n    });\n    const account = useSelector((state) => state.account.account);\n    const accountLoginError = useSelector((state) => state.account.accountLoginError);\n\n\n    const onSubmit = (data, e) => {\n        dispatch(loginAction(data));\n    }\n\n    const onError = (data, e) => {\n        console.log(data);\n    }\n\n    useEffect(() => {\n        console.log(account);\n        console.log(accountLoginError);\n    }, [account, accountLoginError]);\n\n    \n    // useEffect(() => {\n    // }, [accountLoginError]);\n\n    return (\n        <div style={styles().containerForm}>\n            <span style={styles().formTitleFont}>Login to Matuto</span>\n            {FORM_FIELDS.LOGIN.map((formfield, i) => {\n                return (        \n                    <Controller\n                        key={i}\n                        control={control}\n                        name={formfield.name}\n                        rules={formfield.validators}\n                        render={({\n                            field: { onChange, value }\n                            }) => \n                            <TextInput onChange={onChange} val={value} style={styles().containerInputField} type={formfield.type} \n                                name={formfield.name} label={formfield.label} error={errors[formfield.name]}/>\n                        }\n                    />\n                );\n            })}\n            <div style={styles().containerCheckbox}>\n                <input style={styles().checkboxField} type=\"checkbox\"/>\n                <span style={styles().checkboxFieldFont}>Keep me logged in</span>\n            </div>\n            <ProcessButton onClick={handleSubmit(onSubmit, onError)} isNav={false} btnLabel=\"Login\" style={styles().containerButton}/>\n            <div style={styles().containerBreak}>\n                <div style={styles().breakLines}/>\n                <span style={styles().breakFont}>Or</span>\n                <div style={styles().breakLines}/>\n            </div>\n            <AltLoginButton dest=\"/\" src={'icon-google.png'} text={'Sign in with Google'} style={styles().containerButton}/>\n            <AltLoginButton dest=\"/\" src={'icon-fb.png'} text={'Sign in with Facebook'} style={styles().containerButton}/>\n            <p style={styles().signUpFont}>Not a member yet? <NavLink style={styles().signUpLinkFont} to=\"/register\">Sign up here</NavLink></p>\n        </div>\n    )\n}\n\nexport default Login "]},"metadata":{},"sourceType":"module"}