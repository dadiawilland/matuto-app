{"ast":null,"code":"var _jsxFileName = \"/Users/willanddadia/Documents/matuto/matuto-app/src/components/Modal/JobPostModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport styles from './JobPostModal.style';\nimport SideNavigator from '../SideNavigator/SideNavigator';\nimport SearchBar from '../Search/SearchBar';\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport DataTable from '../DataTable/DataTable';\nimport AdminCard from '../Cards/AdminCard';\nimport ProfileList from '../ProfileList/ProfileList';\nimport { StyleRoot } from 'radium';\nimport RegisterButton from '../Buttons/RegisterButton';\nimport AdminHeader from '../Header/AdminHeader';\nimport TextInput from '../TextInput/TextInput';\nimport TextArea from '../TextArea/TextArea';\nimport ProcessButton from '../Buttons/ProcessButton';\nimport CloseButton from '../Buttons/CloseButton';\nimport { toggleJobPostModalAction, createJobPostAction, clearJobPostSuccessAction } from '../../actions/adminActions';\nimport { FORM_FIELDS } from '../../constants/formConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst JobPostModal = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    formState: {\n      errors\n    },\n    handleSubmit,\n    control,\n    getValues,\n    reset\n  } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onSubmit'\n  });\n\n  const onSubmit = (data, e) => {\n    dispatch(createJobPostAction(data));\n  };\n\n  const onError = (data, e) => {\n    console.log(data);\n  };\n\n  const closeModal = () => {\n    reset();\n    dispatch(toggleJobPostModalAction());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles().containerModal,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles().containerForm,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: styles().fontModalTitle,\n        children: \"Create Job Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(CloseButton, {\n        style: styles().closeButtonContainer,\n        onClick: () => closeModal()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles().containerFormBody,\n        children: FORM_FIELDS.JOB_POST.map((formfield, i) => {\n          if (formfield.subFields) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles().containerInputFieldRow,\n              children: formfield.subFields.map((subFormField, ii) => {\n                return /*#__PURE__*/_jsxDEV(Controller, {\n                  control: control,\n                  name: subFormField.name,\n                  rules: subFormField.validators,\n                  defaultValue: \"\",\n                  render: ({\n                    field: {\n                      onChange,\n                      value\n                    }\n                  }) => /*#__PURE__*/_jsxDEV(TextInput, {\n                    onChange: onChange,\n                    val: value,\n                    style: { ...styles().containerInputField,\n                      ...styles().containerInputFieldSml\n                    },\n                    type: subFormField.type,\n                    name: subFormField.name,\n                    label: subFormField.label,\n                    error: errors[subFormField.name]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 64,\n                    columnNumber: 57\n                  }, this)\n                }, ii, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 49\n                }, this);\n              })\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 37\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(Controller, {\n              control: control,\n              name: formfield.name,\n              rules: formfield.validators,\n              render: ({\n                field: {\n                  onChange,\n                  value\n                }\n              }) => /*#__PURE__*/_jsxDEV(TextArea, {\n                onChange: onChange,\n                val: value,\n                style: { ...styles().containerInputField\n                },\n                type: formfield.type,\n                name: formfield.name,\n                label: formfield.label,\n                error: errors[formfield.name]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 45\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 37\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ProcessButton, {\n        onClick: handleSubmit(onSubmit, onError),\n        isNav: false,\n        btnLabel: \"Submit\",\n        style: styles().containerButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 13\n  }, this);\n};\n\n_s(JobPostModal, \"YpA8YO24uPyV2TDCmiFAd5m5TsY=\", false, function () {\n  return [useDispatch, useForm];\n});\n\n_c = JobPostModal;\nexport default JobPostModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobPostModal\");","map":{"version":3,"sources":["/Users/willanddadia/Documents/matuto/matuto-app/src/components/Modal/JobPostModal.js"],"names":["React","useEffect","useDispatch","useSelector","useForm","Controller","ToastContainer","toast","styles","SideNavigator","SearchBar","makeStyles","DataTable","AdminCard","ProfileList","StyleRoot","RegisterButton","AdminHeader","TextInput","TextArea","ProcessButton","CloseButton","toggleJobPostModalAction","createJobPostAction","clearJobPostSuccessAction","FORM_FIELDS","JobPostModal","dispatch","formState","errors","handleSubmit","control","getValues","reset","mode","reValidateMode","onSubmit","data","e","onError","console","log","closeModal","containerModal","containerForm","fontModalTitle","closeButtonContainer","containerFormBody","JOB_POST","map","formfield","i","subFields","containerInputFieldRow","subFormField","ii","name","validators","field","onChange","value","containerInputField","containerInputFieldSml","type","label","containerButton"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport styles from './JobPostModal.style'\nimport SideNavigator from '../SideNavigator/SideNavigator'\nimport SearchBar from '../Search/SearchBar'\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport DataTable from '../DataTable/DataTable'\nimport AdminCard from '../Cards/AdminCard';\nimport ProfileList from '../ProfileList/ProfileList'\nimport { StyleRoot } from 'radium'\nimport RegisterButton from '../Buttons/RegisterButton';\nimport AdminHeader from '../Header/AdminHeader';\nimport TextInput from '../TextInput/TextInput';\nimport TextArea from '../TextArea/TextArea';\nimport ProcessButton from '../Buttons/ProcessButton';\nimport CloseButton from '../Buttons/CloseButton';\nimport { toggleJobPostModalAction, createJobPostAction, clearJobPostSuccessAction } from '../../actions/adminActions';\nimport { FORM_FIELDS } from '../../constants/formConstants';\n\nconst JobPostModal = () => {\n    const dispatch = useDispatch();\n    const {formState: { errors }, handleSubmit, control, getValues, reset } = useForm({\n        mode: 'onSubmit', \n        reValidateMode: 'onSubmit'\n    });\n\n    const onSubmit = (data, e) => {\n        dispatch(createJobPostAction(data));\n    }\n\n    const onError = (data, e) => {\n        console.log(data);\n    }\n\n    const closeModal = () => {\n        reset();\n        dispatch(toggleJobPostModalAction());\n    }\n\n    return (\n            <div style={styles().containerModal}>\n                <div style={styles().containerForm}>\n                    <span style={styles().fontModalTitle}>Create Job Post</span>\n                    <CloseButton style={styles().closeButtonContainer} onClick={() => closeModal()}/>\n                    <div style={styles().containerFormBody}>\n                        {FORM_FIELDS.JOB_POST.map((formfield, i) => {\n                            if (formfield.subFields) {\n                                return (\n                                    <div key={i} style={styles().containerInputFieldRow}>\n                                        {formfield.subFields.map((subFormField, ii) => {\n                                            return (\n                                                <Controller\n                                                    key={ii}\n                                                    control={control}\n                                                    name={subFormField.name}\n                                                    rules={subFormField.validators}\n                                                    defaultValue=\"\"\n                                                    render={({\n                                                        field: { onChange, value  }\n                                                        }) => \n                                                        <TextInput onChange={onChange} val={value} style={{...styles().containerInputField, ...styles().containerInputFieldSml}} type={subFormField.type} \n                                                            name={subFormField.name} label={subFormField.label} error={errors[subFormField.name]}/>\n                                                    }\n                                                />\n                                            );\n                                        })}\n                                    </div>\n                                );\n                            } else {\n                                return (        \n                                    <Controller\n                                        key={i}\n                                        control={control}\n                                        name={formfield.name}\n                                        rules={formfield.validators}\n                                        render={({\n                                            field: { onChange, value }\n                                            }) => \n                                            <TextArea onChange={onChange} val={value} style={{...styles().containerInputField}} type={formfield.type} \n                                                name={formfield.name} label={formfield.label} error={errors[formfield.name]}/>\n                                        }\n                                    />\n                                );\n                            }\n                        })}\n                    </div>\n                    <ProcessButton onClick={handleSubmit(onSubmit, onError)} isNav={false} btnLabel=\"Submit\" style={styles().containerButton}/>\n                </div>\n            </div>\n    )\n}\n\nexport default JobPostModal"]},"metadata":{},"sourceType":"module"}