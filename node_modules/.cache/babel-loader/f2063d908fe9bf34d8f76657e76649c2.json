{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport { ACCOUNT } from '../redux-constants/accountConstants';\nimport { registerAccountService, registerPaymentInfoService, accountLoginService } from '../services/account.service';\nexport function* accountLoginSaga(request) {\n  try {\n    const response = yield call(accountLoginService, request.data);\n\n    if (response.status == 200) {\n      yield put({\n        type: ACCOUNT.LOGIN_SUCCES,\n        data: response.data\n      });\n    } else {\n      yield put({\n        type: ACCOUNT.LOGIN_ERROR,\n        data: response\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n;\nexport function* registerAccountPaymentSaga(request) {\n  try {\n    const response = yield call(registerAccountService, request.data.account);\n\n    if (response.status == 200) {\n      request.data.paymentInfo.accountId = response.data.id;\n      const paymentResponse = yield call(registerPaymentInfoService, request.data.paymentInfo);\n\n      if (paymentResponse.status === 200) {\n        yield put({\n          type: ACCOUNT.REGISTER_SUCCESS,\n          data: response.data\n        });\n      } else {\n        yield put({\n          type: ACCOUNT.REGISTER_ERROR,\n          data: response\n        });\n      }\n    } else {\n      yield put({\n        type: ACCOUNT.REGISTER_ERROR,\n        data: response\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* registerAccountSaga(request) {\n  try {\n    const response = yield call(registerAccountService, request.data.account);\n\n    if (response.status == 200) {\n      yield put({\n        type: ACCOUNT.REGISTER_SUCCESS,\n        data: response.data\n      });\n    } else {\n      yield put({\n        type: ACCOUNT.REGISTER_ERROR,\n        data: response\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}","map":{"version":3,"sources":["/Users/willanddadia/Documents/matuto/matuto-app/src/sagas/accountSagas.js"],"names":["call","put","ACCOUNT","registerAccountService","registerPaymentInfoService","accountLoginService","accountLoginSaga","request","response","data","status","type","LOGIN_SUCCES","LOGIN_ERROR","error","console","log","registerAccountPaymentSaga","account","paymentInfo","accountId","id","paymentResponse","REGISTER_SUCCESS","REGISTER_ERROR","registerAccountSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,OAAT,QAAwB,qCAAxB;AAEA,SAASC,sBAAT,EAAiCC,0BAAjC,EAA6DC,mBAA7D,QAAwF,6BAAxF;AAEA,OAAO,UAAUC,gBAAV,CAA2BC,OAA3B,EAAoC;AACvC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMR,IAAI,CAACK,mBAAD,EAAsBE,OAAO,CAACE,IAA9B,CAA3B;;AACA,QAAID,QAAQ,CAACE,MAAT,IAAmB,GAAvB,EAA4B;AACxB,YAAMT,GAAG,CAAC;AAACU,QAAAA,IAAI,EAAET,OAAO,CAACU,YAAf;AAA6BH,QAAAA,IAAI,EAAED,QAAQ,CAACC;AAA5C,OAAD,CAAT;AACH,KAFD,MAEO;AACH,YAAMR,GAAG,CAAC;AAACU,QAAAA,IAAI,EAAET,OAAO,CAACW,WAAf;AAA4BJ,QAAAA,IAAI,EAAED;AAAlC,OAAD,CAAT;AACH;AACJ,GAPD,CAOE,OAAOM,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;AAAA;AAED,OAAO,UAAUG,0BAAV,CAAqCV,OAArC,EAA8C;AACjD,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMR,IAAI,CAACG,sBAAD,EAAyBI,OAAO,CAACE,IAAR,CAAaS,OAAtC,CAA3B;;AACA,QAAIV,QAAQ,CAACE,MAAT,IAAmB,GAAvB,EAA4B;AACxBH,MAAAA,OAAO,CAACE,IAAR,CAAaU,WAAb,CAAyBC,SAAzB,GAAqCZ,QAAQ,CAACC,IAAT,CAAcY,EAAnD;AACA,YAAMC,eAAe,GAAG,MAAMtB,IAAI,CAACI,0BAAD,EAA6BG,OAAO,CAACE,IAAR,CAAaU,WAA1C,CAAlC;;AACA,UAAIG,eAAe,CAACZ,MAAhB,KAA2B,GAA/B,EAAoC;AAChC,cAAMT,GAAG,CAAC;AAACU,UAAAA,IAAI,EAAET,OAAO,CAACqB,gBAAf;AAAiCd,UAAAA,IAAI,EAAED,QAAQ,CAACC;AAAhD,SAAD,CAAT;AACH,OAFD,MAEO;AACH,cAAMR,GAAG,CAAC;AAACU,UAAAA,IAAI,EAAET,OAAO,CAACsB,cAAf;AAA+Bf,UAAAA,IAAI,EAAED;AAArC,SAAD,CAAT;AACH;AACJ,KARD,MAQO;AACH,YAAMP,GAAG,CAAC;AAACU,QAAAA,IAAI,EAAET,OAAO,CAACsB,cAAf;AAA+Bf,QAAAA,IAAI,EAAED;AAArC,OAAD,CAAT;AACH;AACJ,GAbD,CAaE,OAAOM,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;AAED,OAAO,UAAUW,mBAAV,CAA8BlB,OAA9B,EAAuC;AAC1C,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMR,IAAI,CAACG,sBAAD,EAAyBI,OAAO,CAACE,IAAR,CAAaS,OAAtC,CAA3B;;AACA,QAAIV,QAAQ,CAACE,MAAT,IAAmB,GAAvB,EAA4B;AACxB,YAAMT,GAAG,CAAC;AAACU,QAAAA,IAAI,EAAET,OAAO,CAACqB,gBAAf;AAAiCd,QAAAA,IAAI,EAAED,QAAQ,CAACC;AAAhD,OAAD,CAAT;AACH,KAFD,MAEO;AACH,YAAMR,GAAG,CAAC;AAACU,QAAAA,IAAI,EAAET,OAAO,CAACsB,cAAf;AAA+Bf,QAAAA,IAAI,EAAED;AAArC,OAAD,CAAT;AACH;AACJ,GAPD,CAOE,OAAOM,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { ACCOUNT } from '../redux-constants/accountConstants';\n\nimport { registerAccountService, registerPaymentInfoService, accountLoginService } from '../services/account.service';\n\nexport function* accountLoginSaga(request) {\n    try {\n        const response = yield call(accountLoginService, request.data);\n        if (response.status == 200) {\n            yield put({type: ACCOUNT.LOGIN_SUCCES, data: response.data});\n        } else {\n            yield put({type: ACCOUNT.LOGIN_ERROR, data: response});\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport function* registerAccountPaymentSaga(request) {\n    try {\n        const response = yield call(registerAccountService, request.data.account);\n        if (response.status == 200) {\n            request.data.paymentInfo.accountId = response.data.id;\n            const paymentResponse = yield call(registerPaymentInfoService, request.data.paymentInfo);\n            if (paymentResponse.status === 200) {\n                yield put({type: ACCOUNT.REGISTER_SUCCESS, data: response.data});\n            } else {\n                yield put({type: ACCOUNT.REGISTER_ERROR, data: response});\n            }\n        } else {\n            yield put({type: ACCOUNT.REGISTER_ERROR, data: response});\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport function* registerAccountSaga(request) {\n    try {\n        const response = yield call(registerAccountService, request.data.account);\n        if (response.status == 200) {\n            yield put({type: ACCOUNT.REGISTER_SUCCESS, data: response.data});\n        } else {\n            yield put({type: ACCOUNT.REGISTER_ERROR, data: response});\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}"]},"metadata":{},"sourceType":"module"}